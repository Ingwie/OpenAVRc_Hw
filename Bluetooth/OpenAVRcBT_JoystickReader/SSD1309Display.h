#ifndef _SSD1309DISPLAY_h
#define _SSD1309DISPLAY_h

#if defined(ARDUINO) && ARDUINO >= 100
  #include "arduino.h"
#else
  #include "WProgram.h"
#endif

#include "RCState.h"
//#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
// The pins for I2C are defined by the Wire-library. 
// On an arduino UNO:       A4(SDA), A5(SCL)
// On an arduino MEGA 2560: 20(SDA), 21(SCL)
// On an arduino LEONARDO:   2(SDA),  3(SCL), ...
//#define OLED_RESET     4 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C
//Adafruit_SSD1306 oled(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
Adafruit_SSD1306 oled(-1);

const unsigned char MarilynMonroe [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x1f, 0xff, 0xff, 0xf0, 0x41, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xf8, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xf8, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xf8, 0x01, 0xf1, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xfc, 0x02, 0x78, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfe, 0x03, 0x7c, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xfe, 0x01, 0xfe, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfd, 0xe0, 0x03, 0xff, 0xff, 0xfc, 0x00, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x87, 0xe0, 0xff, 0xff, 0xfc, 0x00, 0x06, 0x07, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0xf9, 0xff, 0xff, 0xfc, 0x00, 0x02, 0x07, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0xc3, 0xc3, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xe0, 0x0c, 0x00, 0xe7, 0x81, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xe0, 0x02, 0x00, 0x02, 0x00, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xe0, 0x01, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x3f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x1e, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x0f, 0xff, 0x3f, 0xf8, 0x00, 0x18, 0x7f, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x01, 0x80, 0x03, 0xfc, 0x3f, 0xfc, 0x00, 0x70, 0xfe, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf0, 0x43, 0xff, 0xff, 0xf8, 0x7f, 0xf8, 0x00, 0x00, 0x7e, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xf0, 0xff, 0xfc, 0x00, 0x00, 0x7c, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xf1, 0xef, 0xf8, 0x00, 0x01, 0xfc, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe4, 0xff, 0xff, 0xff, 0xf3, 0x80, 0xa0, 0x00, 0x07, 0xfc, 0xaf, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xec, 0x5f, 0xff, 0xff, 0xe7, 0xf0, 0x00, 0x00, 0x03, 0xfe, 0xdf, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xee, 0x7f, 0xff, 0xff, 0xc7, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xdf, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xf7, 0xc7, 0xff, 0x06, 0x00, 0x03, 0xff, 0xbf, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x5f, 0xff, 0xc7, 0x07, 0xff, 0x80, 0x00, 0x07, 0xdb, 0xbf, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xee, 0xff, 0xff, 0x80, 0x03, 0xff, 0xc0, 0x00, 0x03, 0xc3, 0x0f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0x98, 0x03, 0xff, 0xf8, 0x00, 0x07, 0xe0, 0x0f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xf8, 0x01, 0xff, 0xfc, 0x01, 0x07, 0xfc, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xcf, 0xef, 0xff, 0xff, 0xe1, 0xff, 0xfc, 0x01, 0x07, 0xf8, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0x7f, 0xf1, 0xff, 0xf8, 0x02, 0x07, 0x88, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xcf, 0xef, 0xf8, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x07, 0x84, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe7, 0xef, 0xf0, 0x04, 0x7f, 0xff, 0xc0, 0x00, 0x07, 0x84, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x3f, 0xff, 0xe0, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x06, 0x04, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x3f, 0x7f, 0xe1, 0xf0, 0x07, 0xff, 0x80, 0x00, 0x07, 0x06, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xfe, 0x03, 0xff, 0x00, 0x00, 0x03, 0x80, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf2, 0x3f, 0xc6, 0x7f, 0x81, 0xce, 0x00, 0x00, 0x01, 0xc1, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe0, 0x3f, 0xc0, 0x07, 0xc1, 0xfe, 0x00, 0x00, 0x0d, 0xc0, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe0, 0x3f, 0xc0, 0x01, 0xe0, 0xfc, 0x00, 0x00, 0x0f, 0xc0, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x3f, 0xc0, 0x00, 0x50, 0xfc, 0x00, 0x00, 0x0e, 0xc0, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x3f, 0xc0, 0x00, 0x18, 0xf8, 0x00, 0x00, 0x0e, 0xc1, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x3f, 0xc0, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x66, 0x81, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x1f, 0xc7, 0x80, 0x00, 0xf8, 0x00, 0x01, 0xe0, 0x00, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x1f, 0xc1, 0xe0, 0x01, 0xf8, 0x00, 0x03, 0xf0, 0x01, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x80, 0x1f, 0xc0, 0x3e, 0x03, 0xf0, 0x00, 0x00, 0xe0, 0x03, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x1f, 0xe0, 0xe0, 0x03, 0xf2, 0x00, 0x00, 0xc0, 0x03, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x80, 0x1f, 0xf0, 0x00, 0x07, 0xe6, 0x00, 0x00, 0xc0, 0x03, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x80, 0x1f, 0xff, 0x00, 0x1f, 0xee, 0x00, 0x00, 0x80, 0x07, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xb8, 0x0f, 0xff, 0xf0, 0x3f, 0xdc, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xbc, 0x0f, 0xff, 0xff, 0xff, 0xdc, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x9e, 0x0f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x08, 0x0f, 0xff, 0xff, 0xff, 0x70, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x0b, 0xff, 0xff, 0xfe, 0xe0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x0b, 0xff, 0xff, 0xf9, 0xc0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x3c, 0x09, 0xff, 0xff, 0xf1, 0x80, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x1e, 0x08, 0x3f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x1f, 0x08, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x80, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xce, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff
};

const unsigned char splash_OpenAVRc[] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 
  0x03, 0xc5, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf2, 0x03, 0x80, 0x76, 0xe0, 
  0x07, 0x80, 0x7c, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0xc4, 0x62, 0x24, 
  0x03, 0x80, 0x38, 0x7f, 0xf0, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x03, 0xfc, 0x46, 0x26, 0x66, 
  0x01, 0xc0, 0x78, 0xf0, 0x38, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x0c, 0x07, 0x7f, 0x24, 0xef, 
  0x00, 0xe0, 0x70, 0x7c, 0x1c, 0x7f, 0xff, 0x70, 0xf0, 0x00, 0x00, 0x00, 0x1f, 0xf7, 0x14, 0x26, 
  0x00, 0x00, 0xe0, 0x1f, 0xfc, 0xff, 0xfe, 0x60, 0x72, 0x00, 0x00, 0x07, 0xe1, 0x86, 0x19, 0x64, 
  0x00, 0x00, 0x70, 0x43, 0xfd, 0xc0, 0x3c, 0xe0, 0x3b, 0x80, 0x00, 0x00, 0x00, 0x04, 0x19, 0xc0, 
  0x00, 0x00, 0x00, 0x78, 0x1d, 0xc0, 0x1c, 0xc0, 0x19, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xfd, 0xc0, 0x39, 0xc0, 0x19, 0xff, 0xe0, 0x3e, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0c, 0x00, 0x03, 0xe0, 0xe0, 0x39, 0xc0, 0x19, 0xc0, 0xf0, 0xff, 0xc1, 0x80, 0x00, 0x00, 
  0x00, 0x0f, 0x00, 0x00, 0x00, 0x7e, 0x79, 0xc0, 0x19, 0xc0, 0x39, 0xe0, 0xf1, 0xff, 0x80, 0x00, 
  0x00, 0x0f, 0xc0, 0x00, 0x00, 0x0f, 0xf9, 0xc0, 0x19, 0xc0, 0x1b, 0xc0, 0x70, 0xff, 0xe0, 0x00, 
  0x00, 0x0f, 0xe0, 0x00, 0x00, 0x01, 0xf9, 0xc0, 0x19, 0xc0, 0x3b, 0xff, 0xf8, 0xf0, 0x38, 0x00, 
  0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x39, 0xc0, 0x19, 0xe0, 0x3b, 0xdf, 0xf0, 0xe0, 0x0e, 0x00, 
  0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x0d, 0xc0, 0x3b, 0xff, 0xf1, 0xc0, 0x00, 0xf0, 0x0f, 0x00, 
  0x00, 0x0f, 0xe0, 0x7c, 0x00, 0x00, 0x00, 0xc0, 0x73, 0xff, 0x80, 0xff, 0xe0, 0x70, 0x0f, 0x00, 
  0x00, 0x0f, 0xf0, 0x7c, 0x00, 0x00, 0x00, 0xe0, 0xf2, 0x00, 0x00, 0x1f, 0xc0, 0x70, 0x1e, 0x00, 
  0x00, 0x0f, 0xf0, 0x3c, 0x00, 0x00, 0x00, 0x7b, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x20, 0x30, 0x00, 
  0x00, 0x1f, 0xf0, 0x3c, 0x00, 0xc0, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0xf0, 0x3e, 0x00, 0xfc, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0xf8, 0x3e, 0x00, 0xfc, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0xf8, 0x3f, 0x00, 0xfc, 0x3f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0xf8, 0x3f, 0x00, 0xfc, 0x3f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0xf8, 0x1f, 0x00, 0xfc, 0x3f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0xf8, 0x1f, 0x00, 0xfc, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 
  0x00, 0x3f, 0xf8, 0x0f, 0x80, 0xfc, 0x1f, 0xc0, 0x0f, 0xf8, 0x00, 0x1f, 0xff, 0xff, 0xe0, 0x00, 
  0x00, 0x3e, 0x78, 0x0f, 0x80, 0xfc, 0x1f, 0xc0, 0x07, 0xfc, 0x00, 0x7f, 0xff, 0xff, 0xf8, 0x00, 
  0x00, 0x3e, 0x78, 0x0f, 0x80, 0xfc, 0x1f, 0xc0, 0x01, 0xfe, 0x00, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x3e, 0x7c, 0x0f, 0x80, 0xfc, 0x1f, 0xc0, 0x01, 0xfe, 0x01, 0xff, 0xff, 0xff, 0xff, 0x00, 
  0x00, 0x3e, 0x7c, 0x0f, 0x80, 0xf8, 0x1f, 0xc0, 0x01, 0xfe, 0x03, 0xff, 0xc0, 0x0f, 0xff, 0x00, 
  0x00, 0x3e, 0x7c, 0x0f, 0xc1, 0xf8, 0x1f, 0xc0, 0x01, 0xfe, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x3c, 0x3c, 0x0f, 0xc1, 0xf8, 0x1f, 0xc0, 0x03, 0xfe, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x3c, 0x3c, 0x07, 0xc1, 0xf8, 0x1f, 0xc0, 0x3f, 0xfe, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x7c, 0x3e, 0x07, 0xc1, 0xf0, 0x1f, 0xff, 0xff, 0xf8, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x7c, 0x3e, 0x07, 0xc3, 0xf0, 0x1f, 0xff, 0xff, 0xe0, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x7c, 0x3e, 0x07, 0xc3, 0xe0, 0x1f, 0xff, 0xff, 0xc0, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xf8, 0x3e, 0x07, 0xc3, 0xe0, 0x1f, 0xff, 0xff, 0xe0, 0x0f, 0xf0, 0x00, 0x00, 0x7e, 0x00, 
  0x00, 0xf8, 0x3e, 0x07, 0xc7, 0xe0, 0x3f, 0xff, 0xff, 0xf0, 0x0f, 0xf0, 0x00, 0x1f, 0xfc, 0x00, 
  0x00, 0xf8, 0x1f, 0x03, 0xe7, 0xc0, 0x3f, 0xff, 0xff, 0xf0, 0x0f, 0xf0, 0x00, 0x1f, 0xfc, 0x00, 
  0x00, 0xf8, 0x3f, 0x03, 0xe7, 0xc0, 0x3f, 0x80, 0x1f, 0xf0, 0x0f, 0xf0, 0x00, 0x3f, 0xfc, 0x00, 
  0x00, 0xff, 0xff, 0x03, 0xef, 0x80, 0x3f, 0x00, 0x0f, 0xf0, 0x0f, 0xf8, 0x00, 0x3f, 0xf8, 0x00, 
  0x00, 0xff, 0xff, 0x03, 0xef, 0x80, 0x3f, 0x00, 0x0f, 0xf0, 0x0f, 0xfc, 0x01, 0xff, 0xf0, 0x00, 
  0x01, 0xff, 0xff, 0x03, 0xff, 0x80, 0x3f, 0x00, 0x0f, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xe0, 0x00, 
  0x03, 0xff, 0xff, 0x03, 0xff, 0x00, 0x3f, 0x00, 0x0f, 0xf0, 0x07, 0xff, 0xff, 0xff, 0xe0, 0x00, 
  0x03, 0xff, 0xff, 0x03, 0xff, 0x00, 0x7f, 0x00, 0x0f, 0xf0, 0x03, 0xff, 0xff, 0xff, 0x80, 0x00, 
  0x03, 0xff, 0xff, 0x03, 0xff, 0x00, 0x7f, 0x00, 0x0f, 0xf8, 0x01, 0xff, 0xff, 0xfc, 0x00, 0x00, 
  0x03, 0xc0, 0x0f, 0x03, 0xfe, 0x00, 0x7f, 0x00, 0x0f, 0xf8, 0x00, 0x3f, 0xff, 0xf0, 0x00, 0x3f, 
  0x07, 0xc0, 0x0f, 0x81, 0xfe, 0x00, 0x7f, 0x00, 0x0f, 0xfc, 0x00, 0x03, 0xf8, 0x00, 0x1f, 0xff, 
  0x07, 0xc0, 0x0f, 0x81, 0xfc, 0x00, 0x7f, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfe, 
  0x07, 0x80, 0x0f, 0x81, 0xfc, 0x00, 0x7f, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x00, 
  0x0f, 0x80, 0x0f, 0x80, 0xfc, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0x80, 0x00, 
  0x0f, 0x80, 0x0f, 0x80, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x3f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

class SSD1309Display {
public:
  void setup() {
    // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
    if(!oled.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
      Serial.println(F("SSD1306 allocation failed"));
      for(;;); // Don't proceed, loop forever
    }
  
    // Show initial display buffer contents on the screen --
    // the library initializes this with an Adafruit splash screen.
//    oled.display();
//    delay(2000); // Pause for 2 seconds

    // Clear the buffer
    oled.clearDisplay();
    oled.drawBitmap(0, 0, splash_OpenAVRc, 128, 64, WHITE);
    oled.display();
    delay(1000); // Pause for 2 seconds
  
    // Clear the buffer
    oled.clearDisplay();
    oled.setTextSize(1);      // Normal 1:1 pixel scale
    oled.setTextColor(SSD1306_WHITE); // Draw white text
  
    // Show the display buffer on the screen. You MUST call display() after
    // drawing commands to make them visible on screen!
//    oled.display();
//    delay(2000);
    oled.print("Joystick  PPM");
    oled.setCursor(1, 2);
    oled.print("**OpenAVRc  Team**");
    oled.display();
  }

  void display_oerr() {
    oled.clearDisplay();
    oled.setCursor(0, 0);
    oled.print("OSC not started");
    oled.display();
  }

  void display_herr() {
    oled.clearDisplay();
    oled.setCursor(0, 0);
    oled.print("HID set error");
    oled.display();
  }

  void display_joystick_connected() {
    oled.clearDisplay();
    oled.setCursor(6, 1);
    oled.print("Joystick");
    oled.setCursor(6, 2);
    oled.print("Connected");
    oled.display();
  }

  void clear() {
    oled.clearDisplay();
  }

  void display_joystick_disconnected() {
    oled.clearDisplay();
    oled.setCursor(6, 1);
    oled.print("Joystick");
    oled.setCursor(4, 2);
    oled.print("Disconnected");
  }

  void display(int flight_mode, int channel5_mode, byte camera_mode, bool camera_auto_center) {
    oled.clearDisplay();
    oled.setCursor(0, 0);
    
    oled.print("Mode:");
    oled.print(flight_mode);

    if (channel5_mode<1000)
    {
      oled.setCursor(13, 0);
    }
    else
    {
      oled.setCursor(12, 0);
    }
    oled.print("CH5:");
    oled.print(channel5_mode);

    oled.setCursor(0, 1);
    oled.print("CMode:");
    oled.print(camera_mode);

    oled.setCursor(17, 1);
    if (camera_auto_center) {
      oled.print("CEN");
    }

    //display_rc(flight_mode, channel5, camera_mode, camera_auto_center);


  }

  void write_mode(RCState *rcs) {
    oled.setCursor(0, 2);
    oled.print("M");
    oled.print(rcs->flight_mode);
  }

  void write_ch5_simple_mode(RCState *rcs) {
    oled.setCursor(3, 2);
    if (rcs->channel5_mode == 1000) {
      oled.print("+");
    }
    else {
      oled.print("o");
    }
  }

  void write_camera_mode(RCState *rcs) {
    oled.setCursor(5, 2);
    switch (rcs->camera_mode) {
    case CAMERA_MODES::exponent:
      oled.print("*");
      break;
    case CAMERA_MODES::slow:
      oled.print("#");
      break;
    case CAMERA_MODES::max_min:
      oled.print((char)B11011011);
      break;
    }

    if (rcs->auto_center) {
      oled.print("+");
    }
    else {
      oled.print((char)B11110011);
    }
  }

  void write_number_value(int value,RCState *rcs) {
    auto mapped_value = map(value, rcs->MIN_VALUE, rcs->MAX_VALUE, -99, +99);
    if (mapped_value >= 0) {
      oled.print(" ");
    }
    if (mapped_value < 10 && mapped_value> -10) {
      oled.print(" ");
    }
    oled.print(mapped_value);
  }

  void write_unsigned_number_value(int value, RCState *rcs) {
    auto mapped_value = map(value, rcs->MIN_VALUE, rcs->MAX_VALUE, 0, +99);
    if (mapped_value >= 0) {
      oled.print(" ");
    }
    if (mapped_value < 10 && mapped_value> -10) {
      oled.print(" ");
    }
    oled.print(mapped_value);
  }

  void write_camera_values(RCState *rcs) {
    oled.setCursor(8, 2);
    write_number_value(rcs->camera_yaw, rcs);

    oled.setCursor(12, 2);

    write_number_value(rcs->camera_pitch, rcs);
  }


  void print_all(RCState *rcs) {
    //oled.clear();
    oled.setCursor(0, 2);

    write_mode(rcs);

    write_ch5_simple_mode(rcs);

    write_camera_mode(rcs);
    write_camera_values(rcs);

    oled.setCursor(0, 3);
    write_number_value(rcs->elevator, rcs);

    oled.setCursor(3, 3);
    write_number_value(rcs->aileron,rcs);

    oled.setCursor(7, 3);
    write_unsigned_number_value(rcs->throttle,rcs);

    oled.setCursor(11, 3);
    write_number_value(rcs->rudder,rcs);

    
  }

  void loop() {

  }
/*
  void displayPercentage(uint8_t char_id, uint8_t value) {
    byte char_remainder[3] = {
      0b00100,
      0b01110,
      0b11111
    };

    const int options = 24;
    const int rows = 8;
    const int cols = 3;

    auto mapped_value = map(value, 0, 100, 0, 24);
    auto row = mapped_value / 3;
    auto col = mapped_value % 3;

    byte char_value[8] = {0};
    for (auto i = 8; i > row; i--) {
      char_value[i] = 0b11111;
    }
    char_value[row] = char_remainder[col];
    oled.createChar(char_id, char_value);
  }

  void display_rx_rssi(uint8_t value) {
    oled.setCursor(14, 1);

    if (value == 255) {
      oled.print("x");
    }
    else {
      displayPercentage(0, value);
      oled.print((char)0);
    }
  }

  void display_tx_rssi(uint8_t value) {
    oled.setCursor(15, 1);

    if (value == 255) {
      oled.print("x");
    }
    else {
      displayPercentage(1, value);
      oled.print((char)1);
    }
  }
*/

};

#endif
